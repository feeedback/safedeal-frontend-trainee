{"version":3,"sources":["Gallery.jsx","Modal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Gallery","props","getImages","urls","signal","a","fetch","response","json","images","abortController","AbortController","_handleModalShow","event","preventDefault","setState","isModalShown","currentImageID","target","id","_handleModalHide","state","this","then","catch","error","name","console","abort","className","onClick","map","img","key","src","url","alt","React","cloneElement","children","PureComponent","Modal","getFullImageAndComment","currentImageData","postNewCommentToImage","commentData","method","body","JSON","stringify","headers","status","Error","_handleAddComment","form","comments","commentObjectToPost","author","comment","commentText","res","newComment","text","date","Date","now","_handleChangeInput","value","window","addEventListener","escKeyCloseModal","keyCode","removeEventListener","action","onSubmit","type","placeholder","onChange","required","toLocaleDateString","_renderFullImage","_renderComments","_renderForm","href","title","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fefa397e.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport \"./Gallery.css\";\r\n\r\nclass Gallery extends React.PureComponent {\r\n  getImages = async (urls, signal) => {\r\n    try {\r\n      const response = await fetch(urls.getImages(), { signal });\r\n      const images = await response.json();\r\n      return images;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  abortController = new AbortController();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { images: [], isModalShown: false, currentImageID: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { urls } = this.props;\r\n\r\n    this.getImages(urls, this.abortController.signal)\r\n      .then((images) => this.setState({ images }))\r\n      .catch((error) => {\r\n        if (error.name !== \"AbortError\") {\r\n          console.error(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  _handleModalShow = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.setState({ isModalShown: true, currentImageID: event.target.id });\r\n  };\r\n\r\n  _handleModalHide = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.setState({ isModalShown: false });\r\n  };\r\n\r\n  render() {\r\n    const { images, currentImageID, isModalShown } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"Gallery\" onClick={this._handleModalShow}>\r\n          {images.map((img) => (\r\n            <img\r\n              className=\"Gallery_image\"\r\n              key={img.id}\r\n              id={img.id}\r\n              src={img.url}\r\n              alt=\"img from gallery\"\r\n            />\r\n          ))}\r\n        </div>\r\n        {isModalShown\r\n          ? React.cloneElement(this.props.children, {\r\n              id: currentImageID,\r\n              _handleModalHide: this._handleModalHide,\r\n            })\r\n          : null}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","/* eslint-disable jsx-a11y/anchor-has-content */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nclass Modal extends React.Component {\r\n  getFullImageAndComment = async (url, id, signal) => {\r\n    try {\r\n      const response = await fetch(url, { signal });\r\n      const currentImageData = await response.json();\r\n      return currentImageData;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n  postNewCommentToImage = async (commentData, url, signal) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(commentData),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        signal,\r\n      });\r\n\r\n      if (response.status === 204) {\r\n        return true;\r\n      } else {\r\n        throw new Error(\"BadResponseStatus\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  abortController = new AbortController();\r\n\r\n  _handleAddComment = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { currentImageData, form } = this.state;\r\n    const { id, comments } = currentImageData;\r\n    const { urls } = this.props;\r\n\r\n    const commentObjectToPost = {\r\n      name: form.author,\r\n      comment: form.commentText,\r\n    };\r\n\r\n    this.postNewCommentToImage(\r\n      commentObjectToPost,\r\n      urls.postNewCommentToImage(id),\r\n      this.abortController.signal\r\n    )\r\n      .then((res) => {\r\n        const newComment = {\r\n          text: form.commentText,\r\n          id: form.author,\r\n          date: Date.now(),\r\n        };\r\n\r\n        this.setState({\r\n          currentImageData: {\r\n            ...currentImageData,\r\n            comments: [...comments, newComment],\r\n          },\r\n          form: { author: \"\", commentText: \"\" },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.name !== \"AbortError\") {\r\n          this.setState({ error: \"Error: Bad server response. Try later\" });\r\n          console.error(error);\r\n        }\r\n      });\r\n  };\r\n\r\n  _handleChangeInput = (event) => {\r\n    const { name, value } = event.target;\r\n    const { form } = this.state;\r\n\r\n    this.setState({ form: { ...form, [name]: value }, error: \"\" });\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentImageData: {},\r\n      form: { author: \"\", commentText: \"\" },\r\n      error: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id, _handleModalHide, urls } = this.props;\r\n\r\n    const escKeyCloseModal = (event) => {\r\n      if (event.keyCode === 27) {\r\n        window.removeEventListener(\"keydown\", escKeyCloseModal);\r\n        _handleModalHide(event);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escKeyCloseModal);\r\n\r\n    this.getFullImageAndComment(\r\n      urls.getFullImageAndComment(id),\r\n      this.abortController.signal\r\n    )\r\n      .then((currentImageData) => this.setState({ currentImageData }))\r\n      .catch((error) => {\r\n        if (error.name !== \"AbortError\") {\r\n          console.error(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  _renderFullImage() {\r\n    const {\r\n      currentImageData: { id, url },\r\n    } = this.state;\r\n\r\n    return (\r\n      <img className=\"Modal_LargeImage\" id={id} src={url} alt=\"Large img\" />\r\n    );\r\n  }\r\n\r\n  _renderForm() {\r\n    const { form, error } = this.state;\r\n\r\n    return (\r\n      <form\r\n        className=\"Modal_FormNewComment\"\r\n        name=\"addComment\"\r\n        action=\"\"\r\n        method=\"\"\r\n        onSubmit={this._handleAddComment}\r\n      >\r\n        <input\r\n          className=\"Modal_FormNewComment_input\"\r\n          type=\"text\"\r\n          name=\"author\"\r\n          placeholder=\"Ваше имя\"\r\n          value={form.author}\r\n          onChange={this._handleChangeInput}\r\n          required\r\n        />\r\n        <input\r\n          className=\"Modal_FormNewComment_input\"\r\n          type=\"text\"\r\n          name=\"commentText\"\r\n          placeholder=\"Ваш комментарий\"\r\n          value={form.commentText}\r\n          onChange={this._handleChangeInput}\r\n          required\r\n        />\r\n        <input\r\n          className=\"Modal_FormNewComment_input Modal_FormNewComment_submit\"\r\n          type=\"submit\"\r\n          value=\"Оставить комментарий\"\r\n        />\r\n        {error !== \"\" ? (\r\n          <span className=\"Modal_FormNewComment_error\">{error}</span>\r\n        ) : null}\r\n      </form>\r\n    );\r\n  }\r\n\r\n  _renderComments() {\r\n    const {\r\n      currentImageData: { comments = [] },\r\n    } = this.state;\r\n\r\n    return (\r\n      <section className=\"Modal_Comments\">\r\n        {comments.map(({ id, text, date }) => (\r\n          <div key={date} id={id} className=\"Modal_Comments_commentWrapper\">\r\n            <p className=\"Modal_Comments_p Modal_Comments_date\">\r\n              {new Date(date).toLocaleDateString(\"ru-RU\")}\r\n            </p>\r\n            <p className=\"Modal_Comments_p\">{text}</p>\r\n          </div>\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { _handleModalHide } = this.props;\r\n\r\n    return (\r\n      <div id=\"ModalWindow\" className=\"Modal\">\r\n        <div className=\"Modal_contentWrapper\">\r\n          {this._renderFullImage()}\r\n          {this._renderComments()}\r\n          {this._renderForm()}\r\n          <a\r\n            href=\"\"\r\n            title=\"Закрыть\"\r\n            className=\"Modal_closeButton\"\r\n            onClick={_handleModalHide}\r\n          />\r\n        </div>\r\n        <a\r\n          href=\"\"\r\n          className=\"Modal_blurFullWindow\"\r\n          onClick={_handleModalHide}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Gallery from \"./Gallery.jsx\";\nimport Modal from \"./Modal.jsx\";\n\nconst urls = {\n  getImages: () => \"https://boiling-refuge-66454.herokuapp.com/images\",\n  getFullImageAndComment: (id) =>\n    `https://boiling-refuge-66454.herokuapp.com/images/${id}`,\n  postNewCommentToImage: (id) =>\n    `https://boiling-refuge-66454.herokuapp.com/images/${id}/comments`,\n};\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App_header\">\n        <h1 className=\"App_header_h1\">Test APP</h1>\n      </header>\n      <main className=\"App_main\">\n        <Gallery urls={urls}>\n          <Modal urls={urls} />\n        </Gallery>\n      </main>\n      <footer className=\"App_footer\">\n        <p className=\"App_footer_p\">© 2018-2019</p>\n      </footer>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}